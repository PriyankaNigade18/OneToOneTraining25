


Selenium WebDriver
--------------------
1.Selenium WebDriver is an interface
2.Selenium WebDriver is an API for webui automation test

--------------------------------------------------------------
Setup
=========== 
1.Using java project
-----------------------
1.create java project
2.Download selenium jar(client library) selenium.dev
2.right click on project--->build path--->configur build path--->libraries
--->classpath--->add external jar-->apply and save

2.Using maven
----------------------------
Maven is build and project management tool
Maven developed by Apache

Repository
---------------
1. Remote and central repository
mvn repository

2.Local Repository
----------------------
c-->user-->.m2 folder-->repo

--------------------

1.create maven project
2.copy selenium-java dependency
3.paste in pom.xml file

POM.xml
===============
Project object model 
this is configuration file for project

Exceptions
===================
1.InvalidArgumentException: invalid argument
For wrong url address
2.NoSuchElementException: if element not found by selenium




Browser Commands
=======================
1.get(url): open application
2.getTitle(): return application title
3.getCurrentUrl(): return current title of application
4.getPageSource(): page source code
5.close(): close the current browser window/active window
Multiple window handling
---------------------------
6.quit(): close the  all open browser windows
7.getWindowHandle()
8.getWindowHandles()


Navigation Commands/Methods
============================
Selenium support one Navigation interface which provides all Navigation cmd

1.to("url")
--------------------
driver.navigate().to("url")

2.back()
-------------------------
driver.navigate().back();

3.forward()
--------------------------
driver.navigate().forward();

4.refresh()
---------------------
driver.navigate().refresh();

==================================================
WebElement Interaction commands
===================================
What is Webelement?
----------------------------
On every web page GUI elements are webelement(textbox,link,button
checkbox,radio,dropdown)

To interact with these element selenium has WebElement interface

How to automate element
------------------------
1.Identify element by getting the address and use methods to identify element
2.perform the action on element

How Selenium Identify any element?
-----------------------------------
Selenium identifies element using Locator

What is Locator
====================
Locator is address of the webelement from Webpage

Selenium support total 8 locators
---------------------------------
1.By id (primary)
2.By name
3.By className
4.By linkText
5.By partailLinkText
6.By tagName

Dynamic
-------------
7.By cssSelector
8.By Xpath

Selenium Support relative locator
==================================

==============================
Selenium uses two methods to identify elements
------------------------------
1.findElement()
- identify single webelement
- This method returns WebElement interface object
- If element is not found it throws exception: NoSuchElementException


2.findElements()
- identify Multiple similar elements
- This method returns List<WebElement>
- when element not found this method never throws any exception

===========================================
WebElement validations
--------------------------
1.isDisplayed()
2.isEnabled()
3.isSelected():radio/checkbox

***WebElement Methods
====================
1.To get the attribute value of element: getDomAttribute("attribute")
2.To get the visible text/inner html text of element: getText()

Element action
-------------------
inputbox,textbox,serchbox: data enter = sendKeys("data",Keys.keybord action);
button,link,checkbox/radio: click=  click()
to clear text: clear()
dropdown: select: selectById/Index/Value

Locators
=====================
1. Hyper Link Automation
-----------------------------
<a id="SignIn" href="login.html">Sign In</a>
								<a>link Text</a>
	1.By linkText(Full Text)
	----------------
	- it match full text of link
	- it is case sensitive
	
	2.By partialLinkText(partial match)
	-----------------------------------
	- it will match partial content
	- it is case sensitive
	
	driver.findElement(By.linkText("Sign In")).click();
	
2.Identify Element using className
=======================================
<button class="btn btn-default btn-primary">Submit</button>
	
			
			class="btn btn-default btn-primary"
					c1     c2         c3			
					
	InvalidSelectorException: Compound class names not permitted	
	
	Solution: Identify unique class name
	Inspector window= ctrl+F (finder) class name 
-------------------------------------------------------
	3.By tagName	
	--------------------
	Number of imput boxes<input>
	Number of images<img>
	Number of links<a>
	
	Multiple webelement: findElements()
======================================================
Synchronization Issue
============================
Time mapping problem between tool and application is called synchronization issue

Selenium Provides dynamic wait
-----------------------------------
1.Implicit wait
--------------------
- It is global wait applicable for complete script

driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));


2.Explicit Wait
--------------------
-It is applicable for single webelement
-It is based on element condition

In selenium to use explicit wait we have two classes

1.WebDriverWait class
2.FluentWait class

WebDriverWait(c) extends FluentWait(c) implements Wait(I)
===================================================================
						
	4.Css
	
	5.Xpath





